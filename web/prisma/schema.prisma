generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// Not currently used
model TrailInfo {
  ID          Int     @id(map: "PK_TrailInfo") @default(autoincrement())
  ImageID     String? @db.VarChar(50)
  Pitch       Float?
  Yaw         Float?
  HoverText   String? @db.Text
  TargetPitch Float?
  TargetYaw   Float?
  TargetHFOV  Float?
  CSSClass    String? @db.Text
}

model AdminAccount {
  Id       Int       @id @default(autoincrement())
  Username String    @unique
  Password String
  Session  Session[]
}

model Session {
  Id             String       @id @default(uuid())
  AdminAccountId Int
  createdAt      DateTime     @default(now())
  AdminAccount   AdminAccount @relation(fields: [AdminAccountId], references: [Id])
}

model Image {
  id                String      @id @db.VarChar(50)
  originalLatitude  Float
  originalLongitude Float
  latitude          Float
  longitude         Float
  bearing           Float
  flipped           Boolean
  shtHash           String
  pitchCorrection   Float
  visibility        Boolean
  sequenceId        Int
  sequence          Sequence    @relation(fields: [sequenceId], references: [id])
  analytics         Analytics[]
  groups            Group[]
}

model Sequence {
  name           String   @unique
  // Upload -> Blur -> Tile -> Sequence -> Done
  status         String
  toDelete       Boolean  @default(false)
  id             Int      @id @default(autoincrement())
  isPublic       Boolean? @default(true)
  images         Image[]
  mapsApiTrailId Int?
}

model Group {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  images Image[]
}

model Analytics {
  id      BigInt   @id @default(autoincrement())
  image   Image    @relation(fields: [imageId], references: [id])
  imageId String   @db.VarChar(50)
  date    DateTime
  count   Int

  @@unique([imageId, date])
}
